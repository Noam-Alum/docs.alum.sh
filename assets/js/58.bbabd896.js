(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{346:function(e,t,s){"use strict";s.r(t);var a=s(14),r=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"run-run-commands-in-an-informative-way"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#run-run-commands-in-an-informative-way"}},[e._v("#")]),e._v(" run - run commands in an informative way")]),e._v(" "),t("p",[e._v("The "),t("strong",[e._v("run")]),e._v(" function is intended to execute commands with both informative clarity\nand stylish presentation.")]),e._v(" "),t("p",[t("strong",[e._v("Usage:")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("run "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("wanted-exit-code"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"<info/notinfo>"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"<cmd>"')]),e._v("\n")])])]),t("ul",[t("li",[t("code",[e._v("<wanted-exit-code>")]),e._v(": An integer, usually 0.")]),e._v(" "),t("li",[t("code",[e._v("<info/notinfo>")]),e._v(": Wheter or not to inform if a commmand has been executed."),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("run "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"info"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"cat exists.txt"')]),e._v("\n")])])]),e._v("Would return:"),t("br"),e._v("\n[INFO] Executed  cat exists.txt  successfully ✔."),t("br"),e._v("\nIf I used "),t("em",[e._v("noinfo")]),e._v(" nothig would have been returned.")]),e._v(" "),t("li",[t("code",[e._v("<cmd>")]),e._v(": The command you want to execute.")])]),e._v(" "),t("p",[t("strong",[e._v("For example:")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('run 0 "info" cat does-not-exists.txt \n')])])]),t("p",[e._v("Would return:")]),e._v(" "),t("div",{staticClass:"language-txt extra-class"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[e._v("[ERROR] Error while executing  cat does-not-exists.txt  ಠ_ರೃ\n✦•┈๑⋅⋯ ⋯⋅๑┈•✦\n   Error:\n✦•┈๑⋅⋯ ⋯⋅๑┈•✦\ncat: does-not-exists.txt: No such file or directory\n✦•┈๑⋅⋯ ⋯⋅๑┈•✦\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("uc_ variables")]),e._v(" "),t("h4",{attrs:{id:"placeholders"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#placeholders"}},[e._v("#")]),e._v(" Placeholders")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Placeholder")]),e._v(" "),t("th",[e._v("Description")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[t("code",[e._v("{[ rn_cmd ]}")])]),e._v(" "),t("td",[e._v("The command executed by the run function.")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("{[ rn_err ]}")])]),e._v(" "),t("td",[e._v("The error returned after executing a given command with run")])])])]),e._v(" "),t("ul",[t("li",[t("p",[t("strong",[e._v("uc_rn_inf_msg:")]),e._v(" Change the info message stracture."),t("br")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("uc_rn_inf_msg")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"{{ B-arrow }} Smootly executed {[ rn_cmd ]} {{ E-smile }}"')]),e._v("\n")])])]),t("p",[e._v("Now when info messages are used they would look like so:")]),e._v(" "),t("div",{staticClass:"language-txt extra-class"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[e._v("➣ Smoothly executed {[ rn_cmd ]} ʘ‿ʘ\n")])])]),t("p",[e._v("{[ rn_cmd ]} being the command you've executed.")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("uc_rn_err_msg:")]),e._v(" Change the error message stracture."),t("br")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("uc_rn_err_msg")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"{{ B-arrow }} Ops! error while executing {[ rn_cmd ]} {{ E-sad }}'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v('{[ rn_err ]}"')]),e._v("\n")])])]),t("p",[e._v("Now when error messages are used they would look like so:")]),e._v(" "),t("div",{staticClass:"language-txt extra-class"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[e._v("➣ Ops! error while executing {[ rn_cmd ]} ◕︵◕\n{[ rn_err ]}\n")])])]),t("p",[e._v("{[ rn_cmd ]} being the command you've executed, and {[ rn_err ]} being the error returned.")])])])])])}),[],!1,null,null,null);t.default=r.exports}}]);