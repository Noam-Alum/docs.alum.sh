{"remainingRequest":"/home/noam/GitHub/docs.alum.sh/main/node_modules/babel-loader/lib/index.js??ref--3-1!/home/noam/GitHub/docs.alum.sh/main/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!/home/noam/GitHub/docs.alum.sh/main/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/noam/GitHub/docs.alum.sh/main/node_modules/vue-loader/lib/index.js??ref--1-1!/home/noam/GitHub/docs.alum.sh/main/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/noam/GitHub/docs.alum.sh/main/docs/New-System/Introduction.md?vue&type=template&id=29b9554f","dependencies":[{"path":"/home/noam/GitHub/docs.alum.sh/main/docs/New-System/Introduction.md","mtime":1723647349319},{"path":"/home/noam/GitHub/docs.alum.sh/main/node_modules/cache-loader/dist/cjs.js","mtime":1723647267973},{"path":"/home/noam/GitHub/docs.alum.sh/main/node_modules/cache-loader/dist/cjs.js","mtime":1723647267973},{"path":"/home/noam/GitHub/docs.alum.sh/main/node_modules/babel-loader/lib/index.js","mtime":1723647268189},{"path":"/home/noam/GitHub/docs.alum.sh/main/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1723647268997},{"path":"/home/noam/GitHub/docs.alum.sh/main/node_modules/cache-loader/dist/cjs.js","mtime":1723647267973},{"path":"/home/noam/GitHub/docs.alum.sh/main/node_modules/vue-loader/lib/index.js","mtime":1723647268409},{"path":"/home/noam/GitHub/docs.alum.sh/main/node_modules/@vuepress/markdown-loader/index.js","mtime":1723647267061}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}